* Binary Search Tree
Time: O(log n) with deletion, insertion, lookup
Space: O(n) and use more space in practice 
Definition: value of left nodes smaller than value of right nodes 
Note: mutable objects need to be removed from tree, update, readd into tree
* Class binary tree
#+begin_src python :results output
  class BSTNode:
      def __init__(self, data=None, left=None, right=None):
          self.data, self.left, self.right = data, left, right
#+end_src
* Binary Search Tree implementation
#+begin_src python :results output
  def search_bst(tree, key):
      if not tree or tree.data == key:
          return tree
      elif key < tree.data:
          search_bst(tree.left, key)
      else:
          search_bst(tree.right, key)
#+end_src
